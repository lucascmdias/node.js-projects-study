/* jshint newcap:false */
function VNode() {}

VNode.prototype = {
  bC_: function (finalChildCount, ownerComponent) {
    this.bU_ = finalChildCount;
    this.bV_ = 0;
    this.bK_ = null;
    this.bW_ = null;
    this.bH_ = null;
    this.bI_ = null;
    this.aH_ = ownerComponent;
  },

  get a_() {
    var firstChild = this.bK_;

    if (firstChild && firstChild.bJ_) {
      var nestedFirstChild = firstChild.a_;
      // The first child is a DocumentFragment node.
      // If the DocumentFragment node has a first child then we will return that.
      // Otherwise, the DocumentFragment node is not *really* the first child and
      // we need to skip to its next sibling
      return nestedFirstChild || firstChild.b_;
    }

    return firstChild;
  },

  get b_() {
    var nextSibling = this.bI_;

    if (nextSibling) {
      if (nextSibling.bJ_) {
        var firstChild = nextSibling.a_;
        return firstChild || nextSibling.b_;
      }
    } else {
      var parentNode = this.bH_;
      if (parentNode && parentNode.bJ_) {
        return parentNode.b_;
      }
    }

    return nextSibling;
  },

  bv_: function (child) {
    this.bV_++;

    if (this.bM_ === "textarea") {
      if (child.bX_) {
        var childValue = child.bD_;
        this.bN_ = (this.bN_ || "") + childValue;
      } else if (child.bG_) {
        this.bY_ = true;
      } else {
        throw TypeError();
      }
    } else {
      var lastChild = this.bW_;

      child.bH_ = this;

      if (lastChild) {
        lastChild.bI_ = child;
      } else {
        this.bK_ = child;
      }

      this.bW_ = child;
    }

    return child;
  },

  bP_: function finishChild() {
    if (this.bV_ === this.bU_ && this.bH_) {
      return this.bH_.bP_();
    } else {
      return this;
    }
  }

  // ,toJSON: function() {
  //     var clone = Object.assign({
  //         nodeType: this.nodeType
  //     }, this);
  //
  //     for (var k in clone) {
  //         if (k.startsWith('_')) {
  //             delete clone[k];
  //         }
  //     }
  //     delete clone._nextSibling;
  //     delete clone._lastChild;
  //     delete clone.parentNode;
  //     return clone;
  // }
};

module.exports = VNode;