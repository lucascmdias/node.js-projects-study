"use strict";
/* jshint newcap:false */

var complain;

var domInsert = require("../dom-insert");
var defaultCreateOut = require("../createOut");
var getComponentsContext = require("./ComponentsContext").q_;
var componentsUtil = require("./util");
var componentLookup = componentsUtil.E_;
var emitLifecycleEvent = componentsUtil.F_;
var destroyNodeRecursive = componentsUtil.G_;
var EventEmitter = require("events-light");
var RenderResult = require("../RenderResult");
var SubscriptionTracker = require("listener-tracker");
var inherit = require("raptor-util/inherit");
var updateManager = require("./update-manager");
var morphdom = require("../vdom/morphdom");
var eventDelegation = require("./event-delegation");
var domData = require("./dom-data");
var componentsByDOMNode = domData.H_;
var keyedElementsByComponentId = domData.I_;
var CONTEXT_KEY = "__subtree_context__";

var slice = Array.prototype.slice;

var COMPONENT_SUBSCRIBE_TO_OPTIONS;
var NON_COMPONENT_SUBSCRIBE_TO_OPTIONS = {
  addDestroyListener: false
};

var emit = EventEmitter.prototype.emit;
var ELEMENT_NODE = 1;

function removeListener(removeEventListenerHandle) {
  removeEventListenerHandle();
}

function walkFragments(fragment) {
  var node;

  while (fragment) {
    node = fragment.firstChild;

    if (!node) {
      break;
    }

    fragment = node.fragment;
  }

  return node;
}

function handleCustomEventWithMethodListener(component, targetMethodName, args, extraArgs) {
  // Remove the "eventType" argument
  args.push(component);

  if (extraArgs) {
    args = extraArgs.concat(args);
  }

  var targetComponent = componentLookup[component.J_];
  var targetMethod = typeof targetMethodName === "function" ? targetMethodName : targetComponent[targetMethodName];
  if (!targetMethod) {
    throw Error("Method not found: " + targetMethodName);
  }

  targetMethod.apply(targetComponent, args);
}

function resolveKeyHelper(key, index) {
  return index ? key + "_" + index : key;
}

function resolveComponentIdHelper(component, key, index) {
  return component.id + "-" + resolveKeyHelper(key, index);
}

/**
 * This method is used to process "update_<stateName>" handler functions.
 * If all of the modified state properties have a user provided update handler
 * then a rerender will be bypassed and, instead, the DOM will be updated
 * looping over and invoking the custom update handlers.
 * @return {boolean} Returns true if if the DOM was updated. False, otherwise.
 */
function processUpdateHandlers(component, stateChanges, oldState) {
  var handlerMethod;
  var handlers;

  for (var propName in stateChanges) {
    if (stateChanges.hasOwnProperty(propName)) {
      var handlerMethodName = "update_" + propName;

      handlerMethod = component[handlerMethodName];
      if (handlerMethod) {
        (handlers || (handlers = [])).push([propName, handlerMethod]);
      } else {
        // This state change does not have a state handler so return false
        // to force a rerender
        return;
      }
    }
  }

  // If we got here then all of the changed state properties have
  // an update handler or there are no state properties that actually
  // changed.
  if (handlers) {
    // Otherwise, there are handlers for all of the changed properties
    // so apply the updates using those handlers

    handlers.forEach(function (handler) {
      var propertyName = handler[0];
      handlerMethod = handler[1];

      var newValue = stateChanges[propertyName];
      var oldValue = oldState[propertyName];
      handlerMethod.call(component, newValue, oldValue);
    });

    emitLifecycleEvent(component, "update");

    component.K_();
  }

  return true;
}

function checkInputChanged(existingComponent, oldInput, newInput) {
  if (oldInput != newInput) {
    if (oldInput == null || newInput == null) {
      return true;
    }

    var oldKeys = Object.keys(oldInput);
    var newKeys = Object.keys(newInput);
    var len = oldKeys.length;
    if (len !== newKeys.length) {
      return true;
    }

    for (var i = len; i--;) {
      var key = oldKeys[i];
      if (!(key in newInput && oldInput[key] === newInput[key])) {
        return true;
      }
    }
  }

  return false;
}

var componentProto;

/**
 * Base component type.
 *
 * NOTE: Any methods that are prefixed with an underscore should be considered private!
 */
function Component(id) {
  EventEmitter.call(this);
  this.id = id;
  this.L_ = null;
  this.M_ = null;
  this.N_ = null;
  this.O_ = null;
  this.P_ = null; // Used to keep track of bubbling DOM events for components rendered on the server
  this.Q_ = null;
  this.J_ = null;
  this.R_ = null;
  this.S_ = undefined;
  this.T_ = false;
  this.U_ = undefined;
  this.V_ = false;
  this.W_ = false;
  this.X_ = false;
  this.Y_ = false;
  this.Z_ = undefined;

  var ssrKeyedElements = keyedElementsByComponentId[id];

  if (ssrKeyedElements) {
    this.p_ = ssrKeyedElements;
    delete keyedElementsByComponentId[id];
  } else {
    this.p_ = {};
  }
}

Component.prototype = componentProto = {
  ___: true,

  subscribeTo: function (target) {
    if (!target) {
      throw TypeError();
    }

    var subscriptions = this.N_ || (this.N_ = new SubscriptionTracker());

    var subscribeToOptions = target.___ ? COMPONENT_SUBSCRIBE_TO_OPTIONS : NON_COMPONENT_SUBSCRIBE_TO_OPTIONS;

    return subscriptions.subscribeTo(target, subscribeToOptions);
  },

  emit: function (eventType) {
    var customEvents = this.Q_;
    var target;

    if (customEvents && (target = customEvents[eventType])) {
      var targetMethodName = target[0];
      var isOnce = target[1];
      var extraArgs = target[2];
      var args = slice.call(arguments, 1);

      handleCustomEventWithMethodListener(this, targetMethodName, args, extraArgs);

      if (isOnce) {
        delete customEvents[eventType];
      }
    }

    if (this.listenerCount(eventType)) {
      return emit.apply(this, arguments);
    }
  },
  getElId: function (key, index) {
    if (!key) {
      return this.id;
    }
    return resolveComponentIdHelper(this, key, index);
  },
  getEl: function (key, index) {
    if (key) {
      var resolvedKey = resolveKeyHelper(key, index);
      var keyedElement = this.p_["@" + resolvedKey];

      if (!keyedElement) {
        var keyedComponentRoot = this.p_[resolvedKey];

        if (keyedComponentRoot) {

          return keyedComponentRoot.nodeType === 1 /** Node.ELEMENT_NODE */
          ? keyedComponentRoot : walkFragments(keyedComponentRoot);
          // eslint-disable-next-line no-constant-condition
        }
      }

      return keyedElement;
    } else {
      return this.el;
    }
  },
  getEls: function (key) {
    key = key + "[]";

    var els = [];
    var i = 0;
    var el;
    while (el = this.getEl(key, i)) {
      els.push(el);
      i++;
    }
    return els;
  },
  getComponent: function (key, index) {
    var rootNode = this.p_[resolveKeyHelper(key, index)];
    if (/\[\]$/.test(key)) {
      rootNode = rootNode && rootNode[Object.keys(rootNode)[0]];
      // eslint-disable-next-line no-constant-condition
    }
    return rootNode && componentsByDOMNode.get(rootNode);
  },
  getComponents: function (key) {
    var lookup = this.p_[key + "[]"];
    return lookup ? Object.keys(lookup).map(function (key) {
      return componentsByDOMNode.get(lookup[key]);
    }).filter(Boolean) : [];
  },
  destroy: function () {
    if (this.V_) {
      return;
    }

    var root = this.M_;

    this._a_();

    var nodes = root.nodes;

    nodes.forEach(function (node) {
      destroyNodeRecursive(node);

      if (eventDelegation._b_(node) !== false) {
        node.parentNode.removeChild(node);
      }
    });

    root.detached = true;

    delete componentLookup[this.id];
    this.p_ = {};
  },

  _a_: function () {
    if (this.V_) {
      return;
    }

    emitLifecycleEvent(this, "destroy");
    this.V_ = true;

    componentsByDOMNode.set(this.M_, undefined);

    this.M_ = null;

    // Unsubscribe from all DOM events
    this._c_();

    var subscriptions = this.N_;
    if (subscriptions) {
      subscriptions.removeAllListeners();
      this.N_ = null;
    }
  },

  isDestroyed: function () {
    return this.V_;
  },
  get state() {
    return this.L_;
  },
  set state(newState) {
    var state = this.L_;
    if (!state && !newState) {
      return;
    }

    if (!state) {
      state = this.L_ = new this._d_(this);
    }

    state._e_(newState || {});

    if (state.X_) {
      this._f_();
    }

    if (!newState) {
      this.L_ = null;
    }
  },
  setState: function (name, value) {
    var state = this.L_;

    if (!state) {
      state = this.L_ = new this._d_(this);
    }
    if (typeof name == "object") {
      // Merge in the new state with the old state
      var newState = name;
      for (var k in newState) {
        if (newState.hasOwnProperty(k)) {
          state._g_(k, newState[k], true /* ensure:true */);
        }
      }
    } else {
      state._g_(name, value, true /* ensure:true */);
    }
  },

  setStateDirty: function (name, value) {
    var state = this.L_;

    if (arguments.length == 1) {
      value = state[name];
    }

    state._g_(name, value, true /* ensure:true */
    , true /* forceDirty:true */
    );
  },

  replaceState: function (newState) {
    this.L_._e_(newState);
  },

  get input() {
    return this.S_;
  },
  set input(newInput) {
    if (this.Y_) {
      this.S_ = newInput;
    } else {
      this._h_(newInput);
    }
  },

  _h_: function (newInput, onInput, out) {
    onInput = onInput || this.onInput;
    var updatedInput;

    var oldInput = this.S_;
    this.S_ = undefined;
    this._i_ = out && out[CONTEXT_KEY] || this._i_;

    if (onInput) {
      // We need to set a flag to preview `this.input = foo` inside
      // onInput causing infinite recursion
      this.Y_ = true;
      updatedInput = onInput.call(this, newInput || {}, out);
      this.Y_ = false;
    }

    newInput = this.R_ = updatedInput || newInput;

    if (this.X_ = checkInputChanged(this, oldInput, newInput)) {
      this._f_();
    }

    if (this.S_ === undefined) {
      this.S_ = newInput;
      if (newInput && newInput.$global) {
        this.U_ = newInput.$global;
      }
    }

    return newInput;
  },

  forceUpdate: function () {
    this.X_ = true;
    this._f_();
  },

  _f_: function () {
    if (!this.W_) {
      this.W_ = true;
      updateManager._j_(this);
    }
  },

  update: function () {
    if (this.V_ === true || this._k_ === false) {
      return;
    }

    var input = this.S_;
    var state = this.L_;

    if (this.X_ === false && state !== null && state.X_ === true) {
      if (processUpdateHandlers(this, state._l_, state._m_, state)) {
        state.X_ = false;
      }
    }

    if (this._k_ === true) {
      // The UI component is still dirty after process state handlers
      // then we should rerender

      if (this.shouldUpdate(input, state) !== false) {
        this._n_();
      }
    }

    this.K_();
  },

  get _k_() {
    return this.X_ === true || this.L_ !== null && this.L_.X_ === true;
  },

  K_: function () {
    this.X_ = false;
    this.W_ = false;
    this.R_ = null;
    var state = this.L_;
    if (state) {
      state.K_();
    }
  },

  shouldUpdate: function () {
    return true;
  },

  F_: function (eventType, eventArg1, eventArg2) {
    emitLifecycleEvent(this, eventType, eventArg1, eventArg2);
  },

  _n_: function () {
    var self = this;
    var renderer = self._o_;

    if (!renderer) {
      throw TypeError();
    }

    var input = this.R_ || this.S_;

    updateManager._p_(function () {
      self._q_(input, false).afterInsert(self.Z_);
    });

    this.K_();
  },

  _q_: function (input, isHydrate) {
    var doc = this.Z_;
    var globalData = this.U_;
    var rootNode = this.M_;
    var renderer = this._o_;
    var createOut = renderer.createOut || defaultCreateOut;
    var out = createOut(globalData);
    out.sync();
    out.Z_ = this.Z_;
    out[CONTEXT_KEY] = this._i_;

    var componentsContext = getComponentsContext(out);
    var globalComponentsContext = componentsContext.k_;
    globalComponentsContext._r_ = this;
    globalComponentsContext.l_ = isHydrate;

    renderer(input, out);

    var result = new RenderResult(out);

    var targetNode = out.D_().a_;

    morphdom(rootNode, targetNode, doc, componentsContext);

    return result;
  },

  _s_: function () {
    var root = this.M_;
    root.remove();
    return root;
  },

  _c_: function () {
    var eventListenerHandles = this.O_;
    if (eventListenerHandles) {
      eventListenerHandles.forEach(removeListener);
      this.O_ = null;
    }
  },

  get _t_() {
    var state = this.L_;
    return state && state._u_;
  },

  _v_: function (customEvents, scope) {
    var finalCustomEvents = this.Q_ = {};
    this.J_ = scope;

    customEvents.forEach(function (customEvent) {
      var eventType = customEvent[0];
      var targetMethodName = customEvent[1];
      var isOnce = customEvent[2];
      var extraArgs = customEvent[3];

      finalCustomEvents[eventType] = [targetMethodName, isOnce, extraArgs];
    });
  },

  get el() {
    return walkFragments(this.M_);
  },

  get els() {
    return (this.M_ ? this.M_.nodes : []).filter(function (el) {
      return el.nodeType === ELEMENT_NODE;
    });
    // eslint-disable-next-line no-constant-condition
  }
};

componentProto.elId = componentProto.getElId;
componentProto._w_ = componentProto.update;
componentProto._x_ = componentProto.destroy;

// Add all of the following DOM methods to Component.prototype:
// - appendTo(referenceEl)
// - replace(referenceEl)
// - replaceChildrenOf(referenceEl)
// - insertBefore(referenceEl)
// - insertAfter(referenceEl)
// - prependTo(referenceEl)
domInsert(componentProto, function getEl(component) {
  return component._s_();
}, function afterInsert(component) {
  return component;
});

inherit(Component, EventEmitter);

module.exports = Component;